apiVersion: v1
kind: Secret
metadata:
  name: qr-generator-secrets
  namespace: qr-generator
  labels:
    app: qr-generator
    component: secrets
type: Opaque
data:
  # AWS credentials (base64 encoded)
  # Replace with actual base64 encoded values
  AWS_ACCESS_KEY_ID: ""  # echo -n "your-access-key" | base64
  AWS_SECRET_ACCESS_KEY: ""  # echo -n "your-secret-key" | base64
  
  # Azure credentials (base64 encoded)
  AZURE_STORAGE_ACCOUNT: ""  # echo -n "your-storage-account" | base64
  AZURE_STORAGE_CONNECTION_STRING: ""  # echo -n "your-connection-string" | base64
  
  # Database credentials (if needed)
  DATABASE_URL: ""  # echo -n "postgresql://user:pass@host:5432/db" | base64
  
  # Redis credentials (if needed)
  REDIS_URL: ""  # echo -n "redis://user:pass@host:6379" | base64

---
# Service Account for AWS IAM roles
apiVersion: v1
kind: ServiceAccount
metadata:
  name: qr-generator-sa
  namespace: qr-generator
  labels:
    app: qr-generator
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT-ID:role/qr-generator-role
automountServiceAccountToken: true

---
# ClusterRole for necessary permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: qr-generator-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: qr-generator-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: qr-generator-role
subjects:
- kind: ServiceAccount
  name: qr-generator-sa
  namespace: qr-generator
