apiVersion: v1
kind: ConfigMap
metadata:
  name: qr-generator-config
  namespace: qr-generator
  labels:
    app: qr-generator
    component: config
data:
  # Backend configuration
  PYTHONPATH: "/app"
  PYTHONUNBUFFERED: "1"
  AWS_REGION: "us-east-1"
  AWS_S3_BUCKET: "qr-codes-bucket-prod"
  AZURE_CONTAINER: "qr-codes"
  
  # Frontend configuration
  NEXT_PUBLIC_APP_NAME: "QR Code Generator"
  NEXT_PUBLIC_APP_VERSION: "1.0.0"
  NEXT_PUBLIC_API_URL: "https://api.qr-generator.example.com"
  
  # Monitoring configuration
  PROMETHEUS_PORT: "9090"
  GRAFANA_PORT: "3000"
  
  # Application settings
  LOG_LEVEL: "INFO"
  MAX_QR_BATCH_SIZE: "100"
  QR_CACHE_TTL: "3600"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: qr-generator
  labels:
    app: qr-generator
    component: nginx
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        upstream backend {
            server qr-generator-backend:8000;
        }
        
        upstream frontend {
            server qr-generator-frontend:3000;
        }
        
        server {
            listen 80;
            server_name _;
            
            # Security headers
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
            
            # Frontend routes
            location / {
                proxy_pass http://frontend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Backend API routes
            location /api/ {
                rewrite ^/api/(.*) /$1 break;
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Health check endpoint
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }
